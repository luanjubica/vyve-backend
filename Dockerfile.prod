# Production Dockerfile - Multi-stage build
FROM golang:1.24-alpine AS builder

# Install required packages
RUN apk add --no-cache git gcc musl-dev

WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY . .

# Build the binary
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -ldflags="-w -s -X main.Version=$(git describe --tags --always --dirty) -X main.BuildTime=$(date -u '+%Y-%m-%d_%H:%M:%S')" \
    -a -installsuffix cgo \
    -o vyve-api \
    cmd/api/main.go

# Final stage - minimal image
FROM alpine:3.19

# Install ca-certificates for HTTPS and tzdata for timezones
RUN apk --no-cache add ca-certificates tzdata curl

# Create non-root user
RUN addgroup -g 1000 -S vyve && \
    adduser -u 1000 -S vyve -G vyve

WORKDIR /app

# Copy binary from builder
COPY --from=builder /app/vyve-api /app/vyve-api

# Copy migrations
COPY --from=builder /app/migrations /app/migrations

# Create necessary directories
RUN mkdir -p /app/logs /app/uploads && \
    chown -R vyve:vyve /app

# Switch to non-root user
USER vyve

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Expose port
EXPOSE 8080

# Run the binary
ENTRYPOINT ["/app/vyve-api"]